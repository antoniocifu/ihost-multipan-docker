name: 'build all'

on:
  workflow_dispatch:

env:
  UPSTREAM_REPO: ihost-open-source-project/hassio-ihost-silabs-multiprotocol-amd64
  REPO_URL: "https://ghcr.io/v2/ihost-open-source-project/hassio-ihost-silabs-multiprotocol-amd64/tags/list"

jobs:
  provide_versions:
    name: provide base versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.tags.outputs.matrix }}
    steps:
      - name: get all tags (auth to GHCR)
        id: tags
        run: |
          TOKEN=$(curl -fsSL -u "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" "https://ghcr.io/token?service=ghcr.io&scope=repository:${{ env.UPSTREAM_REPO }}:pull" | jq -r '.token')
          curl -sSL -H "Authorization: Bearer ${TOKEN}" '${{ env.REPO_URL }}' | jq -r '.tags | map({name: .}) | reverse' | sed 's/"latest"/"skip-latest"/g' | sed 's/skip-latest/latest/'
          echo matrix=$(curl -sSL -H "Authorization: Bearer ${TOKEN}" '${{ env.REPO_URL }}' | jq -r '.tags | map({name: .}) | reverse') >> $GITHUB_OUTPUT
      - name: count tags
        run: jq -r 'length' <<< '${{ steps.tags.outputs.matrix }}'

  run_builds:
    runs-on: ubuntu-latest
    needs: provide_versions
    permissions: write-all
    strategy:
      max-parallel: 1
      matrix:
        include: ${{ fromJson(needs.provide_versions.outputs.matrix) }}
    name: trigger build for ${{ fromJSON(toJSON(matrix)).name }}
    steps:
      - name: Check
        env:
          VERSION: ${{ fromJSON(toJSON(matrix)).name }}
        run: |
          echo "VERSION: ${{ env.VERSION }}"

      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: build_version
          client-payload: '{"base_version": "${{ fromJSON(toJSON(matrix)).name }}"}'
